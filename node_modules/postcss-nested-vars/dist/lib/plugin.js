'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var plugin = 'postcss-nested-vars';
exports['default'] = _postcss2['default'].plugin(plugin, function () {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    options.logLevel = options.logLevel || 'error';
    var errorContext = { plugin: plugin };
    var specialSearchValue = /\$\(([\w\d-_]+)\)/g;
    var log = ({
        error: function error(message, node) {
            throw node.error(message, errorContext);
        },
        warn: function warn(message, node, result) {
            node.warn(result, message);
        },
        silent: function silent() {
            // noop
        }
    })[options.logLevel];
    if (!log) {
        throw new Error('Invalid logLevel: ' + options.logLevel);
    }
    var globals = {};
    if (options.globals) {
        Object.keys(options.globals).forEach(function (key) {
            globals[key] = [options.globals[key]];
        });
    }
    return function (root, result) {
        walk(root, result, globals);
    };
    function walk(container, result, vars) {
        var containerVars = {};
        container.walk(function (node) {
            if (node.type === 'rule') {
                resolveContainer(node, 'selector');
                return;
            }
            if (node.type === 'atrule') {
                resolveContainer(node, 'params');
                return;
            }
            if (node.type === 'decl') {
                resolveDeclaration(node);
                return;
            }
        });
        Object.keys(containerVars).forEach(function (varName) {
            vars[varName].pop();
        });
        function resolveContainer(container2, prop) {
            if (container2[prop].indexOf('$(') !== -1) {
                replaceAllVars(container2, prop, specialSearchValue);
            }
            walk(container2, result, vars);
        }
        function resolveDeclaration(decl) {
            if (decl.prop.indexOf('$(') !== -1) {
                replaceAllVars(decl, 'prop', specialSearchValue);
            }
            if (/^\$(?!\()/.test(decl.prop)) {
                var m = decl.prop.match(/^\$([\w\d-_]+)$/);
                var varName = m && m[1];
                var stack = vars[varName];
                if (!stack) {
                    vars[varName] = [];
                }
                if (!containerVars[varName]) {
                    containerVars[varName] = true;
                    vars[varName].push(decl.value);
                } else {
                    stack[stack.length - 1] = decl.value;
                }
                decl.remove();
                return;
            }
            if (decl.value.indexOf('$') !== -1) {
                replaceAllVars(decl, 'value', /\$([\w\d-_]+)/g);
            }
        }
        function replaceAllVars(obj, prop, searchValue) {
            obj[prop] = obj[prop].replace(searchValue, function (m, varName) {
                var stack = vars[varName];
                if (!stack || !stack.length) {
                    log('Undefined variable: ' + varName, obj, result);
                    return '$' + varName;
                }
                return stack[stack.length - 1];
            });
        }
    }
});
module.exports = exports['default'];